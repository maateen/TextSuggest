#!/usr/bin/env python3
# coding: utf-8

# Background daemon for TextSuggest
# Auto-launches TextSuggest on suitable conditions

import time
import subprocess as sp
import sys
import os
import argparse
import gi
from gi.repository import GLib as glib
import keysyms

arg_parser = argparse.ArgumentParser(
	description='''textsuggestd - Background daemon for TextSuggest''',
	formatter_class=argparse.RawTextHelpFormatter,
	epilog='More information in the manual page: textsuggestd(1)')

arg_parser.add_argument(
	'--exclude-apps', type=str,
	help='Specify apps excluded from suggestions. \n \n',
	nargs='+', required=False)

arg_parser.add_argument(
	'--include-apps', type=str,
	help='Override specified app in default list of excluded apps. \n \n',
	nargs='+', required=False)

arg_parser.add_argument(
	'--textsuggest-executable', type=str,
	help='Specify path to TextSuggest executable. \n \n',
	required=False)

arg_parser.add_argument(
	'--textsuggest-args', type=str,
	help='Specify additional arguments for TextSuggest. \n \n',
	nargs='+', required=False)

args = arg_parser.parse_args()

def get_cmd_out(command_list):

	return sp.check_output(command_list).decode('utf-8').rstrip('\r\n')

def log(message, level):

	# Simple logger

	colors = {
				'info'  : get_cmd_out(['tput', 'setaf', '4']),
				'warn'  : get_cmd_out(['tput', 'setaf', '3']),
				'error' : get_cmd_out(['tput', 'setaf', '1']),
				'reset' : get_cmd_out(['tput', 'sgr0'])
			 }

	if sys.stdout.isatty():
		colorize = True
	else:
		colorize = False

	if colorize:
		if level.startswith('WARN'):
			level = colors['warn'] + level + colors['reset']

		elif level == 'ERROR':
			level = colors['error'] + level + colors['reset']

		else:
			level = colors['info'] + level + colors['reset']

	print('%s (%s): %s' % (level, time.strftime('%X'), message))

def log_keys():

	# Generator that yields each X11 keypress

	logger_shell = '''xinput list | grep -Po 'id=\K\d+(?=.*slave\s*keyboard)' |
xargs -P0 -n1 xinput test | awk 'BEGIN{while (("xmodmap -pke" | getline) > 0) k[$2]=$4}
{print $0 "[" k[$NF] "]"; fflush(stdout)}' '''

	# Basically gets list of xinput, searches for keyboard,
	# runs xinput test on each line, then gets the actual press (keysym)
	# though xmodmap + awk

	logger_proc = sp.Popen(logger_shell, stdout=sp.PIPE, universal_newlines=True, shell=True)
	stdout_lines = iter(logger_proc.stdout.readline, "")
	logger_proc.stdout.flush()
	
	for stdout_line in stdout_lines:
		yield stdout_line
	
	logger_proc.stdout.flush()

	logger_proc.stdout.close()

	# Example output:
	# key press   34 [bracketleft]

def textsuggest_should_start(additional_exclude=None, include=None):

	# Check if it is appropriate to run TextSuggest

	# Checks for 'no':
	# - Is current app a code editor/IDE?
	# - Is current app a terminal?
	# - Is current app a password entry?
	# - Is current app in additional_exclude?

	# TODO: Add more checks

	if include is None:
		include = []

	if additional_exclude is None:
		additional_exclude = []

	active_window = sp.check_output(['xdotool getwindowfocus getwindowname'],
	 								shell=True)
	active_window = active_window.decode('utf-8').rstrip().lower()

	excluded_apps = ['guake', 'term', 'auth', 'password', 'gksu', 'atom',
					 'sublime', 'vim', 'sh', 'emacs', 'ide', 'komodo', 'jet',
					 'eclipse', 'beans', 'pycharm', 'webstorm', 'phpstorm']

	for app in additional_exclude:
		if app not in excluded_apps:
			excluded_apps.append(app)

	for app in include:
		if app in excluded_apps:
			excluded_apps.remove(app)

	for app in excluded_apps:
		if app in active_window:
			return False

	return True

def start_textsuggest(textsuggest_exec_path, return_cmd=False):

	textsuggest_args = args.textsuggest_args if args.textsuggest_args else []

	textsuggest_args.append('--auto-selection')

	textsuggest_cmd = '%s %s %s' % (sys.executable, textsuggest_exec_path, ' '.join(textsuggest_args))

	if return_cmd:
		return textsuggest_cmd

	textsuggest_proc = sp.Popen([textsuggest_cmd],
	 							shell=True, stdout=sp.PIPE)

	textsuggest_out, textsuggest_err = textsuggest_proc.communicate()

	if textsuggest_proc.returncode == 2 or textsuggest_out == '':
		return 'ERR_REJECTED'
	elif textsuggest_proc.returncode == 1:
		return 'ERR_NOWORDS'
	else:
		return 'OK'

def exit(code):

	# Exit, cleanly
	os.remove('/tmp/textsuggestd.pid')
	sys.exit(code)

def is_already_running():

	# Check if an instance of textsuggestd is already running

	if not os.path.isfile('/tmp/textsuggestd.pid'):
		return False

	else:
		with open('/tmp/textsuggestd.pid') as f:
			pidfile_pid = f.read()

		if sp.Popen(['ps', pidfile_pid], stdout=sp.PIPE).returncode != 0:
			return False

		else:
			return True, pidfile_pid

# Start inputlistener

def main():

	if is_already_running():
		log('textsuggestd already running (/tmp/textsuggestd.pid)! Exiting...', 'ERROR')
		exit(1)

	log('Started textsuggestd.', 'INFO')
	log('PID: %d' % os.getpid(), 'INFO')

	with open('/tmp/textsuggestd.pid', 'w') as f:
		f.write(str(os.getpid()))

	if args.textsuggest_executable is None:
		if os.path.isfile(os.path.join(os.getcwd(), 'TextSuggest.py')):
			textsuggest_exec = os.path.join(os.getcwd(), 'TextSuggest.py')
		elif os.path.isfile('/usr/bin/textsuggest'):
			textsuggest_exec = '/usr/bin/textsuggest'
		else:
			log('No TextSuggest executable found.', 'ERROR')
			exit(1)
	else:
		if not os.path.isfile(args.textsuggest_executable):
			log('Specified TextSuggest executable does not exist.', 'ERROR')
			exit(1)

	log('TextSuggest command: %s' % start_textsuggest(textsuggest_exec, return_cmd=True), 'INFO')

	excluded_strs = ['\t', ' ', '  ', '\n', '\r', '\r\n', '', '<', '>', '[',
					 ']']

	modifiers = ['Shift', 'Control', 'Multi', 'Meta', 'Esc',
				'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',
				'F11', 'F12']

	word_separators = ['\t', ' ', '  ', '.', '\n', '\r\n']

	for key_press in log_keys():
		actual_key = key_press.split(' ')[-1]
		key_string = keysyms.KEYSYMS.get(actual_key, None)
		try:
			if wait:
				if key_string in word_separators:
					print('Resuming')
					wait = False

				else:
					wait = True
					continue
		except UnboundLocalError:
			# First run of loop
			wait = False

		if key_press in modifiers:
			continue

		if 'press' in key_press:  # exclude key release
			if key_string is not None or key_string not in excluded_strs:
				if textsuggest_should_start():
					textsuggest_retval = start_textsuggest(textsuggest_exec)
					if textsuggest_retval in ['ERR_NOWORDS', 'ERR_REJECTED']:
						if textsuggest_retval == 'ERR_REJECTED':
							log('TextSuggest was cancelled. Waiting until next word.',
								'WARNING')

						else:
							log('Textsuggest found no words. Waiting until next word.',
								'WARNING')

					wait = True

if __name__ == '__main__':
	main()
